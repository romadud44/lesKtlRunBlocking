import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

/**
 *  Задание 1. Написать программу покупки продукта в магазине. Она запускается с фразы "Программа покупки продуктов".
 *  Далее через секундную задержку предлагает оплатить товар: "Купить товар:\n1.Да\n2.Нет". Если да, то запускается
 *  корутина, в которой идет процесс оплаты:
 * "Оплата продукта началась"-> через 2 сек -> "Сканирование и обработка..." -> через 2 сек ->"Покупка оплачена."
 * Если нет, то запускается корутина отмены оплаты:
 * "Отмена покупки..." -> через 2 сек ->"Покупка отменена."
 * В любом другом случае – выходит ошибка.
 * Написать корутину, которая отвечает за окончание работы и выводит сообщение "До свидания". Она может запускаться при
 * любом вышеуказанном исполнении программы в конце.
 */
suspend fun main() = coroutineScope {
    println("Программа покупки продуктов")
    delay(1000L)
    println(
        "Купить товар?:\n" +
                "1. ДА\n" +
                "2. НЕТ"
    )
    val input = readln()
    val job = launch {
        when (input) {
            "1" -> purchase()
            "2" -> cancelPurchase()
            else -> println("Ошибка!")
        }
    }
    job.join()
    exit()
}

suspend fun purchase() {
    println("Оплата продукта началась")
    delay(2000L)
    println("Сканирование и обработка...")
    delay(2000L)
    println("Покупка оплачена.")
}

suspend fun cancelPurchase() {
    println("Отмена покупки...")
    delay(2000L)
    println("Покупка отменена.")
}

suspend fun exit() {
    println("До свидания")
}